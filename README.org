#+property: header-args :noweb yes :mkdirp yes
#+startup: overview
* ❄️ Welcome to my nix-config ❄️
This is my literate nix/nixos/home-manager config written with the help of [[https://www.gnu.org/software/emacs/][Emacs]] and [[https://orgmode.org/][Org mode]].

* Config structure
I splitted my nix config into two parts, hosts specific config and nix modules.

The host config contains:
- hardware-configuration.nix - created by the initial nix installation
- configuration.nix - default nix configuration
- home.nix - home-manager config
- disks.nix - disk partitioning and formatting

Modules:
- home-manager - application and package config used by home-manager
- nixos - application and package config used by nix
#+begin_src shell :results org
  tree -d
#+end_src

#+begin_src org
.
├── hosts
│   ├── aphrodite
│   └── zeus
│       └── assets
└── modules
    ├── home-manager
    │   ├── education
    │   ├── gui-apps
    │   ├── scripts
    │   ├── shell
    │   ├── text-editors
    │   ├── utility
    │   └── window-manager
    └── nixos
        ├── development
        └── udev

17 directories
#+end_src
* How to install a system
** If using luks encryption create a secret
#+begin_src shell
  echo 'mysuperpassword' > /tmp/secret.key
#+end_src
** Optional: Fromat disks with disko
For partitioning and formatting I'm using [[https://github.com/nix-community/disko][disko]]. I hardcoded the ids of my drives to the disks.nix
config for each host. Be sure to update the disks.nix with your current and/or desired disk layout and ids.
#+begin_src shell
  sudo nix \
       --experimental-features "nix-command flakes" \
       run github:nix-community/disko/latest -- \
       --mode destroy,format,mount \
       --flake github:tuxikus/nix-config#host
#+end_src
** Install system
#+begin_src shell
  sudo nixos-install --no-root-passwd --flake github:tuxikus/nix-config#host
#+end_src
** !!! Set user passwords !!!
#+begin_src shell
  sudo nixos-enter --root /mnt -c 'passwd username'
#+end_src
* Flake
#+begin_src nix :tangle flake.nix :noweb tangle
  {
    inputs = {
      nixpkgs.url = "github:NixOS/nixpkgs/nixos-24.11";

      home-manager = {
        url = "github:nix-community/home-manager/release-24.11";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      disko = {
        url = "github:nix-community/disko";
        inputs.nixpkgs.follows = "nixpkgs";
      };

      darwin = {
        url = "github:lnl7/nix-darwin/nix-darwin-24.11";
        inputs.nixpkgs.follows = "nixpkgs";
      };
    };

    outputs =
      {
        self,
        nixpkgs,
        home-manager,
        darwin,
        disko,
        ...
      }@inputs:
      {
        ### Hosts
        # zeus
        nixosConfigurations.zeus = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          specialArgs = inputs;
          modules = [
            disko.nixosModules.disko
            ./hosts/zeus/configuration.nix
            ./hosts/zeus/disks.nix
            home-manager.nixosModules.home-manager
            {
              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.users.tuxikus = import ./hosts/zeus/home.nix;
              home-manager.sharedModules = [ ];
            }
          ];
        };
        # aphrodite
        darwinConfigurations.aphrodite = darwin.lib.darwinSystem {
          system = "aarch64-darwin";
          modules = [
            ./hosts/aphrodite/configuration.nix
            home-manager.darwinModules.home-manager
            {
              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.users."dominik.potoczki" = import ./hosts/aphrodite/home.nix;
              home-manager.sharedModules = [ ];
            }
          ];
        };
      };
  }
#+end_src
* Hosts
** Zeus
Main workstation.

Specs:
| CPU    | AMD Ryzen 5 5600X (12) @ 3.70 GHz |
| GPU    | AMD Radeon RX 6800 XT             |
| Memory | 32GB DDR4                         |

*** configuration.nix
#+begin_src nix :tangle hosts/zeus/configuration.nix :noweb tangle :mkdirp yes
  {
    config,
    pkgs,
    inputs,
    home-manager,
    ...
  }:
  let
    nixModulesDirectory = ../../modules/nixos;
  in
  {

    imports = [
      ./hardware-configuration.nix
      (nixModulesDirectory + "/udev/zsa-keyboards.nix")
      (nixModulesDirectory + "/udev/vial.nix")
      (nixModulesDirectory + "/udev/platformio.nix")
      (nixModulesDirectory + "/virtualization.nix")
      (nixModulesDirectory + "/podman.nix")
    ];

    nix = {
      settings.experimental-features = [
        "nix-command"
        "flakes"
      ];
      gc = {
        automatic = true;
        dates = "weekly";
        options = "--delete-older-than 30d";
      };
    };

    boot.loader = {
      systemd-boot.enable = false;
      grub = {
        enable = true;
        device = "nodev";
        efiSupport = true;
      };
      efi.canTouchEfiVariables = true;
    };

    networking.hostName = "zeus";
    networking.networkmanager.enable = true;
    time.timeZone = "Europe/Berlin";

    i18n = {
      defaultLocale = "en_US.UTF-8";
      extraLocaleSettings = {
        LC_ADDRESS = "de_DE.UTF-8";
        LC_IDENTIFICATION = "de_DE.UTF-8";
        LC_MEASUREMENT = "de_DE.UTF-8";
        LC_MONETARY = "de_DE.UTF-8";
        LC_NAME = "de_DE.UTF-8";
        LC_NUMERIC = "de_DE.UTF-8";
        LC_PAPER = "de_DE.UTF-8";
        LC_TELEPHONE = "de_DE.UTF-8";
        LC_TIME = "de_DE.UTF-8";
      };
    };

    security.rtkit.enable = true;

    users = {
      groups = {
        tuxikus = { };
        plugdev = { }; # group to flash zsa moonlander mk1 keyboard with oryx in chromium
      };
      users = {
        tuxikus = {
          uid = 1000;
          isNormalUser = true;
          description = "tuxikus";
          group = "tuxikus";
          extraGroups = [
            "networkmanager"
            "wheel"
            "plugdev"
          ];
        };
      };
    };

    fonts.packages = with pkgs; [
      nerdfonts
      profont
    ];

    services = {
      pcscd.enable = true;
      dbus.enable = true;
      xserver = {
        enable = true;
        displayManager.gdm.enable = true;
        windowManager.qtile = {
          enable = true;
          extraPackages =
            python3Packages: with python3Packages; [
              qtile-extras
            ];
        };
        xkb = {
          layout = "us";
          variant = "";
        };
      };
      pipewire = {
        enable = true;
        alsa.enable = true;
        alsa.support32Bit = true;
        pulse.enable = true;
      };
    };
    environment.systemPackages = with pkgs; [
      arduino-ide
      bat
      calibre
      chromium
      cifs-utils
      dig
      dunst
      fastfetch
      ffmpeg
      firefox
      fuzzel
      fzf
      ghostty
      grim
      home-manager
      hyprpaper
      hyprsunset
      keepassxc
      ledger
      mpd
      mpv
      pass
      pavucontrol
      platformio
      python3
      ripgrep
      ripgrep
      samba
      slurp
      tree
      tree-sitter
      unzip
      vial
      waybar
      wget
      wl-clipboard
      wlr-randr
      yt-dlp
      yubioath-flutter
    ];

    programs = {
      gnupg.agent = {
        enable = true;
      };
      direnv = {
        enable = true;
        nix-direnv.enable = true;
      };
      hyprland = {
        enable = true;
        xwayland.enable = true;
      };
      ssh.startAgent = true;
    };

    # This value determines the NixOS release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. It‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # Before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "24.05"; # Did you read the comment?
  }
#+end_src
*** home.nix
#+begin_src nix :tangle hosts/zeus/home.nix :noweb tangle :mkdirp yes
  {
    pkgs,
    ...
  }:
  let
    homeManagerModulesDirectory = ../../modules/home-manager;
  in
  {
    imports = [
      (homeManagerModulesDirectory + "/shell/bash.nix")
      (homeManagerModulesDirectory + "/shell/xonsh.nix")
      (homeManagerModulesDirectory + "/text-editors/emacs.nix")
      (homeManagerModulesDirectory + "/gui-apps/ghostty.nix")
      (homeManagerModulesDirectory + "/gui-apps/fuzzel.nix")
      (homeManagerModulesDirectory + "/utility/tmux.nix")
      (homeManagerModulesDirectory + "/utility/zellij.nix")
      (homeManagerModulesDirectory + "/education/latex.nix")
      (homeManagerModulesDirectory + "/window-manager/hyprland.nix")
      (homeManagerModulesDirectory + "/window-manager/hyprpaper.nix")
      (homeManagerModulesDirectory + "/window-manager/waybar.nix")
      (homeManagerModulesDirectory + "/window-manager/qtile.nix")
      (homeManagerModulesDirectory + "/scripts/home-backup.nix")
      (homeManagerModulesDirectory + "/scripts/uuidgenlc.nix")
      (homeManagerModulesDirectory + "/scripts/music-unzip.nix")
      (homeManagerModulesDirectory + "/scripts/cli-project-switcher.nix")
    ];

    home = {
      username = "tuxikus";
      homeDirectory = "/home/tuxikus";

      sessionVariables = {
        EDITOR = "emacsclient -c";
        VISUAL = "emacsclient -c";
      };

      # This value determines the Home Manager release that your
      # configuration is compatible with. This helps avoid breakage
      # when a new Home Manager release introduces backwards
      # incompatible changes.
      #
      # You can update Home Manager without changing this value. See
      # the Home Manager release notes for a list of state version
      # changes in each release.
      stateVersion = "24.05";

      packages = [];

      sessionPath = [ "$HOME/.local/bin" ];
    };

    services = {
      emacs.enable = true;
    };

    programs = {
      home-manager.enable = true;
      git = {
        enable = true;
        userEmail = "contact@tuxikus.de";
        userName = "tuxikus";
      };
    };

    wallpaper = ./assets/wallpaper.png;
    terminal = "ghostty";
    appLauncher = "fuzzel";

    emacsPkg = pkgs.emacs;
    customInit = ''
        (setq container-executable 'podman)
      '';
    fontSize = "15";

    qtileWallpaper = ./assets/qtile-wallpaper.png;

    projectDirectories = ''
      ~/projects/personal
      ~/projects/git
    '';
  }
#+end_src
*** hardware-configuration.nix
#+begin_src nix :tangle hosts/zeus/hardware-configuration.nix :noweb tangle :mkdirp yes
  # Do not modify this file!  It was generated by ‘nixos-generate-config’ and may be overwritten by future invocations. Please make changes to /etc/nixos/configuration.nix instead.
  {
    config,
    lib,
    pkgs,
    modulesPath,
    ...
  }:
  {
    imports = [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

    nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";

    boot = {
      initrd = {
        availableKernelModules = [
          "nvme"
          "xhci_pci"
          "ahci"
          "usbhid"
          "uas"
          "sd_mod"
        ];
        kernelModules = [ ];
      };
      kernelModules = [ "kvm-amd" ];
      extraModulePackages = [ ];
    };

    hardware = {
      pulseaudio.enable = false;
      cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    };

    networking.useDHCP = lib.mkDefault true;
  }
#+end_src
*** disks.nix
#+begin_src nix :tangle hosts/zeus/disks.nix :noweb tangle :mkdirp yes
{
  disko.devices = {
    disk = {
      root = {
        device = "/dev/disk/by-id/nvme-SAMSUNG_MZVLB1T0HBLR-000L2_S4DZNF0N620723";
        type = "disk";
        content = {
          type = "gpt";
          partitions = {
            ESP = {
              size = "512M";
              type = "EF00";
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot";
                mountOptions = [ "umask=0077" ];
              };
            };
            luks = {
              size = "100%";
              content = {
                type = "luks";
                name = "crypted1";
                settings.allowDiscards = true;
                passwordFile = "/tmp/secret.key";
                content = {
                  type = "filesystem";
                  format = "ext4";
                  mountpoint = "/";
                };
              };
            };
          };
        };
      };
      home = {
        type = "disk";
        device = "/dev/disk/by-id/nvme-Samsung_SSD_970_EVO_Plus_2TB_S4J4NX0R513058T";
        content = {
          type = "gpt";
          partitions = {
            luks = {
              size = "100%";
              content = {
                type = "luks";
                name = "crypted2";
                settings.allowDiscards = true;
                passwordFile = "/tmp/secret.key";
                content = {
                  type = "filesystem";
                  format = "ext4";
                  mountpoint = "/home";
                };
              };
            };
          };
        };
      };
      virt = {
        device = "/dev/disk/by-id/wwn-0x50014ee26a6ed785";
        type = "disk";
        content = {
          type = "gpt";
          partitions = {
            virt = {
              size = "100%";
              content = {
                type = "filesystem";
                format = "ext4";
                mountpoint = "/mnt/virt";
              };
            };
          };
        };
      };
    };
  };
}
#+end_src

** Aphrodite
Apple MacBook Pro M2
*** configuration.nix
#+begin_src nix :tangle hosts/aphrodite/configuration.nix :noweb tangle :mkdirp yes
  { pkgs, ... }:
  let
    nixModulesDirectory = ../../modules/nixos;
  in
  {
    imports = [

    ];

    nix.settings.experimental-features = "nix-command flakes";

    nixpkgs = {
      config.allowUnfree = true;
      hostPlatform = "aarch64-darwin";
    };

    users = {
      users."dominik.potoczki" = {
        name = "dominik.potoczki";
        home = "/Users/dominik.potoczki";
      };
    };

    fonts.packages = [
      pkgs.nerdfonts
      pkgs.profont
    ];

    services = {
      nix-daemon.enable = true;

      aerospace = {
        enable = true;
        settings = {
          gaps = {
            inner.horizontal = 22;
            inner.vertical = 22;
            outer.left = 15;
            outer.bottom = 15;
            outer.top = [
              { monitor."T34w-30" = 50; }
              15
            ];
            outer.right = 15;
          };
          mode.main.binding = {
            cmd-left = "focus left";
            cmd-down = "focus down";
            cmd-up = "focus up";
            cmd-right = "focus right";

            cmd-shift-left = "move left";
            cmd-shift-down = "move down";
            cmd-shift-up = "move up";
            cmd-shift-right = "move right";

            cmd-m = "fullscreen";

            cmd-1 = "workspace 1";
            cmd-2 = "workspace 2";
            cmd-3 = "workspace 3";
            cmd-4 = "workspace 4";
            cmd-5 = "workspace 5";
            cmd-6 = "workspace 6";
            cmd-7 = "workspace 7";
            cmd-8 = "workspace 8";
            cmd-9 = "workspace 9";
            cmd-0 = "workspace 10";

            cmd-shift-1 = "move-node-to-workspace 1";
            cmd-shift-2 = "move-node-to-workspace 2";
            cmd-shift-3 = "move-node-to-workspace 3";
            cmd-shift-4 = "move-node-to-workspace 4";
            cmd-shift-5 = "move-node-to-workspace 5";
            cmd-shift-6 = "move-node-to-workspace 6";
            cmd-shift-7 = "move-node-to-workspace 7";
            cmd-shift-8 = "move-node-to-workspace 8";
            cmd-shift-9 = "move-node-to-workspace 9";
            cmd-shift-0 = "move-node-to-workspace 10";

            cmd-r = "mode resize";
          };
          mode.resize.binding = {
            h = "resize width -50";
            j = "resize height +50";
            k = "resize height -50";
            l = "resize width +50";
            enter = "mode main";
            esc = "mode main";
          };
        };
      };
      sketchybar.enable = true;

      jankyborders = {
        enable = true;
        active_color = "0xFFFF0000";
        width = 10.0;
      };
    };

    environment = {
      systemPackages = with pkgs; [
        raycast
        aerospace
        _1password-cli
        sketchybar
        jankyborders
        python3
        fzf
        go-task
        openssh
        jupyter
        tree-sitter
        poppler_utils
        dig
        ripgrep
        fastfetch
        pngpaste

        # :o
        gnutls
        coreutils
        findutils
        gnutar
        gnused
        gawk
        getopt
        indent
        gnugrep
      ];
    };

    programs = {
      direnv = {
        enable = true;
        nix-direnv.enable = true;
      };
      bash.enable = true;
      zsh.enable = true;
    };

    homebrew = {
      enable = true;
      onActivation.cleanup = "uninstall";
      taps = [ ];
      brews = [ ];
      casks = [
        "orbstack"
        "tunnelblick"
        "utm"
        "ghostty"
      ];
    };

    system = {
      # Used for backwards compatibility, please read the changelog before changing
      # $ darwin-rebuild changelog
      stateVersion = 4;
      defaults.screencapture.target = "clipboard";
    };

    security.pam.enableSudoTouchIdAuth = true;
  }
#+end_src
*** home.nix
#+begin_src nix :tangle hosts/aphrodite/home.nix :noweb tangle :mkdirp yes
  { pkgs, ... }:
  let
    homeManagerModulesDirectory = ../../modules/home-manager;
  in
  {
    imports = [
      (homeManagerModulesDirectory + "/text-editors/emacs.nix")
      (homeManagerModulesDirectory + "/education/latex.nix")
      (homeManagerModulesDirectory + "/education/r.nix")
      (homeManagerModulesDirectory + "/shell/xonsh.nix")
      (homeManagerModulesDirectory + "/shell/bash.nix")
      (homeManagerModulesDirectory + "/utility/tmux.nix")
      (homeManagerModulesDirectory + "/utility/zellij.nix")
      (homeManagerModulesDirectory + "/gui-apps/ghostty.nix")
      (homeManagerModulesDirectory + "/scripts/uuidgenlc.nix")
    ];

    home = {
      sessionVariables = {
        EDITOR = "emacsclient -c";
        VISUAL = "emacsclient -c";
      };
      # This value determines the Home Manager release that your
      # configuration is compatible with. This helps avoid breakage
      # when a new Home Manager release introduces backwards
      # incompatible changes.

      # You should not change this value, even if you update Home Manager. If you do
      # want to update the value, then make sure to first check the Home Manager
      # release notes.
      stateVersion = "24.11"; # Please read the comment before changing.
      packages = [ ];
    };

    programs.home-manager.enable = true;

    #emacsPkg = pkgs.emacs-macport;
    emacsPkg = (emacs.override { withNativeCompilation = false; });
    fontSize = "20";
    customInit = ''
      (setq custom-init-loaded t)
      (setq mac-option-key-is-meta t
        mac-command-key-is-meta nil
        mac-option-modifier 'meta
        mac-command-modifier 'super)
      (setq container-executable 'docker)
    '';
  }
#+end_src
* Modules
** Nixos
*** udev rules
**** vial
#+begin_src nix :tangle modules/nixos/udev/vial.nix :mkdirp yes
  {
    pkgs,
    ...
  }:
  {
    services.udev.packages = [
      (pkgs.writeTextFile {
        name = "udev-file";
        text = ''
          KERNEL=="hidraw*", SUBSYSTEM=="hidraw", ATTRS{serial}=="*vial:f64c2b3c*", MODE="0660", GROUP="users", TAG+="uaccess", TAG+="udev-acl"
        '';
        destination = "/etc/udev/rules.d/99-vial.rules";
      })
    ];
  }
#+end_src
**** zsa-keyboards
#+begin_src nix :tangle modules/nixos/udev/zsa-keyboards.nix :mkdirp yes
  {
    config,
    lib,
    pkgs,
    ...
  }:

  {
    services.udev.packages = [
      (pkgs.writeTextFile {
        name = "udev-file";
        text = ''
          # Rules for Oryx web flashing and live training
          KERNEL=="hidraw*", ATTRS{idVendor}=="16c0", MODE="0664", GROUP="plugdev"
          KERNEL=="hidraw*", ATTRS{idVendor}=="3297", MODE="0664", GROUP="plugdev"

          # Legacy rules for live training over webusb (Not needed for firmware v21+)
          # Rule for all ZSA keyboards
          SUBSYSTEM=="usb", ATTR{idVendor}=="3297", GROUP="plugdev"
          # Rule for the Moonlander
          SUBSYSTEM=="usb", ATTR{idVendor}=="3297", ATTR{idProduct}=="1969", GROUP="plugdev"
          # Rule for the Ergodox EZ
          SUBSYSTEM=="usb", ATTR{idVendor}=="feed", ATTR{idProduct}=="1307", GROUP="plugdev"
          # Rule for the Planck EZ
          SUBSYSTEM=="usb", ATTR{idVendor}=="feed", ATTR{idProduct}=="6060", GROUP="plugdev"

          # Wally Flashing rules for the Ergodox EZ
          ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789B]?", ENV{ID_MM_DEVICE_IGNORE}="1"
          ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789A]?", ENV{MTP_NO_PROBE}="1"
          SUBSYSTEMS=="usb", ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789ABCD]?", MODE:="0666"
          KERNEL=="ttyACM*", ATTRS{idVendor}=="16c0", ATTRS{idProduct}=="04[789B]?", MODE:="0666"

          # Keymapp / Wally Flashing rules for the Moonlander and Planck EZ
          SUBSYSTEMS=="usb", ATTRS{idVendor}=="0483", ATTRS{idProduct}=="df11", MODE:="0666", SYMLINK+="stm32_dfu"
          # Keymapp Flashing rules for the Voyager
          SUBSYSTEMS=="usb", ATTRS{idVendor}=="3297", MODE:="0666", SYMLINK+="ignition_dfu"
        '';
        destination = "/etc/udev/rules.d/50-zsa.rules";
      })
    ];
  }
#+end_src
**** platformio
#+begin_src nix :tangle modules/nixos/udev/platformio.nix :mkdirp yes
  {
    pkgs,
    ...
  }:
  {
    services.udev.packages = with pkgs; [ platformio-core.udev ];
  }
#+end_src
*** Containers
**** Podman
#+begin_src nix :tangle modules/nixos/podman.nix :mkdirp yes
  { pkgs, ... }:
  {
    virtualisation.containers.enable = true;
    virtualisation = {
      podman = {
        enable = true;
        defaultNetwork.settings.dns_enabled = true;
      };
    };

    environment.systemPackages = with pkgs; [
      dive
      podman-tui
      podman-compose
    ];
  }
#+end_src
*** Virtualization
#+begin_src nix :tangle modules/nixos/virtualization.nix :mkdirp yes
  { pkgs, ... }:
  {
    environment = {
      systemPackages = [ pkgs.qemu ];
    };

    programs.virt-manager.enable = true;
  }
#+end_src
** Home manager
*** GUI applications
**** Ghostty
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/gui-apps/ghostty.nix :mkdirp yes
  {
    home.file.".config/ghostty/config" = {
      text = ''
      <<ghostty-configuration>>
      '';
    };
  }
#+end_src
***** Configuration
#+name: ghostty-configuration
#+begin_src conf :tangle ~/projects/personal/nix-config-dump/ghostty/.config/ghostty/config
  window-padding-x = 10
  window-padding-y = 10
  macos-titlebar-style = hidden
  confirm-close-surface = false

  theme = BlulocoLight

  font-family = "Iosevka Nerd Font"
  font-size = 15
#+end_src
**** Fuzzel
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/gui-apps/fuzzel.nix :mkdirp yes
  {
    home.file.".config/fuzzel/fuzzel.ini" = {
      text = ''
        <<fuzzel-configuration>>
      '';
    };
  }
#+end_src
***** Configuration
#+name: fuzzel-configuration
#+begin_src conf :tangle ~/projects/personal/nix-config-dump/fuzzel/.config/fuzzel/fuzzel.ini
  [font]
  Iosevka Nerd Font:weight=light
#+end_src
*** Text editors
**** Emacs
Docker config from [[https://www.rahuljuliato.com/posts/emacs-docker-podman][Rahul's Blog]]
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/text-editors/emacs.nix :noweb tangle :mkdirp yes
  {
    config,
    pkgs,
    lib,
    ...
  }:
  let
    my-emacs = config.emacsPkg.override {
      withNativeCompilation = true;
    };
    my-emacs-with-packages = (pkgs.emacsPackagesFor my-emacs).emacsWithPackages (
      epkgs: with epkgs; [
        aas
        ace-window
        avy
        cape
        consult
        consult-yasnippet
        corfu
        corfu-terminal
        dashboard
        direnv
        dirvish
        docker
        dockerfile-mode
        dslide
        eat
        embark
        embark-consult
        embark-org-roam
        ess
        exec-path-from-shell
        fireplace
        flycheck
        flycheck-inline
        format-all
        git-link
        go-mode
        god-mode
        hide-mode-line
        htmlize
        ledger-mode
        magit
        marginalia
        move-text
        nix-mode
        orderless
        org-download
        org-modern
        org-present
        org-roam
        org-roam-ui
        org-superstar
        pass
        pdf-tools
        python-mode
        pyvenv
        ripgrep
        rust-mode
        salt-mode
        spacious-padding
        tabspaces
        verb
        vertico
        vterm
        vundo
        walkman
        wgrep
        yasnippet
        (trivialBuild {
          pname = "moc";
          version = "v0.6.2";
          src = pkgs.fetchurl {
            url = "https://raw.githubusercontent.com/positron-solutions/moc/refs/heads/master/moc.el";
            sha256 = "sha256-rwsfM+FvWb0sviT2TtCVlWW8rfW6XBHlch4AbvhaL00=";
          };

          nativeBuildInputs = [ hide-mode-line ];
        })
        (treesit-grammars.with-grammars (
          grammars: with grammars; [
            tree-sitter-python
            tree-sitter-bash
            tree-sitter-c
            tree-sitter-go
            tree-sitter-gomod
            tree-sitter-rust
          ]
        ))
      ]
    );
  in
  {
    options = {
      emacsPkg = lib.mkOption {
        type = lib.types.package;
      };
      customInit = lib.mkOption {
        type = lib.types.str;
      };
      fontSize = lib.mkOption {
        type = lib.types.str;
      };
    };

    config = {
      programs.emacs = {
        enable = true;
        package = my-emacs-with-packages;
        extraConfig = ''
          (load-file "~/.emacs.d/init.el")
        '';
      };

      home.file.".emacs.d/init.el".text = ''
        <<emacs-configuration>>
      '';
    };
  }
#+end_src
***** Configuration
#+name: emacs-configuration
#+begin_src emacs-lisp
  (use-package emacs
    :bind
    (("M-<tab>" . completion-at-point)
     ("C-c d" . duplicate-line)
     ("C-c f a" . format-all-buffer)
     ("C-c e r" . eval-region)
     ("C-c e b" . eval-buffer)
     ("C-c w m" . whitespace-mode)
     ("C-x c" . compile)
     ("C-S-a" . beginning-of-buffer)
     ("C-S-e" . end-of-buffer)
     ("M-z" . zap-up-to-char)
     ("C-z" . nil))

    :hook
    ((before-save . whitespace-cleanup)
     (makefile-mode . indent-tabs-mode)
     (prog-mode . display-line-numbers-mode))

    :init
    (fset 'yes-or-no-p 'y-or-n-p)
    (auto-save-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    ;;(save-place-mode 1)
    (global-auto-revert-mode 1)
    (setq-default indent-tabs-mode nil)

    ;; disable bell
    (setq ring-bell-function 'ignore)

    ;; line numbers, enabled via prog-mode-hook
    (setq display-line-numbers-type 'relative)

    ;; cursor
    ;;(setq-default cursor-type 'box)

    ;; line numbers
    ;;(setq display-line-numbers 'relative)
    ;;(global-display-line-numbers-mode)

    (load-theme 'modus-operandi t)

    :config
    ;; mode line
    (setq-default mode-line-format
                  (list
                   '(:eval (propertize (format " %s " (buffer-name))
                                       'face '(:weight bold)))
                   '(:eval (propertize (format " %s " "|")
                                       'face '(:weight bold)))
                   '(:eval (propertize (format " %s " major-mode)
                                       'face '(:weight bold)))))

    ;; move mode line to top
    (setq-default header-line-format mode-line-format)
    (setq-default mode-line-format nil)

    ;; undeline header line
    ;; (custom-set-faces
    ;;  '(header-line ((t (:underline "black" :weight bold)))))

    ;; tab bar
    (setq tab-bar-new-button nil
          tab-bar-close-button nil)

    ;; Customize the appearance of the tab-bar
    (set-face-attribute 'tab-bar nil
                        :height 0.9  ;; Adjust the height of the tab text
                        :weight 'bold)  ;; Make the tab text bold

    (setq create-lockfiles nil
          make-backup-files nil
          custom-theme-directory "~/.emacs.d/themes"
          inhibit-startup-message t
          inhibit-startup-screen t
          initial-scratch-message ";;; Emacs is fun"
          global-auto-revert-non-file-buffers t
          org-id-uuid-program "~/.local/bin/uuidgenlc")

    ;; (set-frame-font "Iosevka Nerd Font-15" nil t) ; test fonts
    (add-to-list 'default-frame-alist
                 '(font . "Iosevka Nerd Font-${config.fontSize}"))

    (which-key-mode 1)

    :custom
    (enable-recursive-minibuffers t)
    (read-extended-command-predicate #'command-completion-default-include-p)

    ;; Emacs 30 and newer: Disable Ispell completion function.
    ;; Try `cape-dict' as an alternative.
    (text-mode-ispell-word-completion nil)

    ;; Hide commands in M-x which do not apply to the current mode.
    (read-extended-command-predicate #'command-completion-default-include-p))

  (use-package dirvish
    :init
    (dirvish-override-dired-mode))

  (use-package ledger-mode
    :mode "\\.lgr\\'")

  (use-package aas
    :hook
    ((LaTeX-mode . aas-activate-for-major-mode)
     (org-mode . aas-activate-for-major-mode))
    :config
    (aas-set-snippets 'text-mode
      ":o" "ö"
      ":O" "Ö"
      ":u" "ü"
      ":U" "Ü"
      ":a" "ä"
      ":A" "Ä"
      "sz" "ß"))

  (use-package god-mode
    :init
    (god-mode))

  (use-package ace-window
    :bind
    (("M-o" . ace-window))
    :init
    (setq aw-dispatch-always t)
    (setq aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s ?f)))

  (use-package tabspaces
    :hook
    (after-init . tabspaces-mode)
    :commands
    (tabspaces-switch-or-create-workspace
     tabspaces-open-or-create-project-and-workspace)
    :custom
    (tabspaces-use-filtered-buffers-as-default t)
    (tabspaces-default-tab "Default")
    (tabspaces-remove-to-default t)
    (tabspaces-include-buffers '("*scratch*"))
    (tabspaces-initialize-project-with-todo t)
    (tabspaces-todo-file-name "project-todo.org")
    ;; sessions
    (tabspaces-session t)
    (tabspaces-session-auto-restore t)
    (tab-bar-new-tab-choice "*scratch*")
    :config
    (with-eval-after-load 'consult
      ;; hide full buffer list (still available with "b" prefix)
      (consult-customize consult--source-buffer :hidden t :default nil)
      ;; set consult-workspace buffer list
      (defvar consult--source-workspace
        (list :name     "Workspace Buffers"
              :narrow   ?w
              :history  'buffer-name-history
              :category 'buffer
              :state    #'consult--buffer-state
              :default  t
              :items    (lambda () (consult--buffer-query
                                    :predicate #'tabspaces--local-buffer-p
                                    :sort 'visibility
                                    :as #'buffer-name)))

        "Set workspace buffer list for consult-buffer.")
      (add-to-list 'consult-buffer-sources 'consult--source-workspace)))

  (use-package avy
    :bind
    (("M-g f" . avy-goto-line)
     ("M-g w" . avy-goto-word-1)
     ("C-'" . avy-goto-char-2)))

  (use-package cape
    :bind ("M-p" . cape-prefix-map)
    :init
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    ;;(add-hook 'completion-at-point-functions #'cape-abbrev)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    (add-hook 'completion-at-point-functions #'cape-emoji)
    ;;(add-hook 'completion-at-point-functions #'cape-dict)
    (add-hook 'completion-at-point-functions #'cape-rfc1345)
    (add-hook 'completion-at-point-functions #'cape-sgml)
    (add-hook 'completion-at-point-functions #'cape-tex)
    (add-hook 'completion-at-point-functions #'cape-history))

  (use-package consult
    :bind
    (("C-c M-x" . consult-mode-command)
     ("C-c h" . consult-history)
     ("C-c k" . consult-kmacro)
     ("C-c m" . consult-man)
     ("C-c i" . consult-info)
     ("C-x b" . consult-buffer)
     ("C-x 4 b" . consult-buffer-other-window)
     ("C-x 5 b" . consult-buffer-other-frame)
     ("C-x t b" . consult-buffer-other-tab)
     ("C-x r b" . consult-bookmark)
     ("C-x p b" . consult-project-buffer)
     ("M-#" . consult-register-load)
     ("M-'" . consult-register-store)
     ("C-M-#" . consult-register)
     ("M-y" . consult-yank-pop)
     ("M-g e" . consult-compile-error)
     ("M-g g" . consult-goto-line)
     ("M-g M-g" . consult-goto-line)
     ("M-g o" . consult-outline)
     ("M-g m" . consult-mark)
     ("M-g k" . consult-global-mark)
     ("M-g i" . consult-imenu)
     ("M-g I" . consult-imenu-multi)
     ("M-s d" . consult-find)
     ("M-s c" . consult-locate)
     ("M-s g" . consult-grep)
     ("M-s G" . consult-git-grep)
     ("M-s r" . consult-ripgrep)
     ("M-s l" . consult-line)
     ("M-s L" . consult-line-multi)
     ("M-s k" . consult-keep-lines)
     ("M-s u" . consult-focus-lines)))

  (use-package corfu
    :init
    (unless (display-graphic-p)
      (corfu-terminal-mode +1))
    :config
    (global-corfu-mode)
    :custom
    (corfu-auto nil)
    (corfu-echo-documentation nil)
    (tab-always-indent 'complete)
    (completion-cycle-threshold nil))

  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))

    (when (daemonp)
      (exec-path-from-shell-initialize)))

  (use-package dashboard
    :config
    (setq dashboard-projects-backend 'project-el)

    (setq dashboard-items '((recents   . 10)
                            (bookmarks . 10)
                            (projects  . 10)
                            (agenda    . 10)
                            (registers . 10)))

    (setq dashboard-item-shortcuts '((recents   . "r")
                                     (bookmarks . "m")
                                     (projects  . "p")
                                     (agenda    . "a")
                                     (registers . "e")))

    (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))

    (dashboard-setup-startup-hook))

  ;; (use-package dired
  ;;   :config
  ;;   (put 'dired-find-alternate-file 'disabled nil))

  (use-package direnv
    :init
    (direnv-mode))

  (use-package pdf-tools
    :init
    (pdf-tools-install))

  (defcustom container-executable 'podman
    "The executable to be used with docker mode."
    :type '(choice
            (const :tag "docker" docker)
            (const :tag "podman" podman))
    :group 'custom)

  (use-package docker
    :bind
    ;;("C-c d" . docker)
    :config
    (pcase container-executable
      ('docker
       (setf docker-command "docker"
             docker-compose-command "docker-compose"
             docker-container-tramp-method "docker"))
      ('podman
       (setf docker-command "podman"
             docker-compose-command "podman-compose"
             docker-container-tramp-methodu "podman"))))

  (use-package eglot
    ;; :hook
    ;; ((python-ts-mode . eglot-ensure)
    ;;  (python-mode . eglot-ensure))
    :custom
    (eglot-autoshutdown t)
    (eglot-confirm-server-initiated-edits nil))

  (use-package electric
    :init
    ;;(setq electric-pair-preserve-balance nil)
    (electric-pair-mode)

    :config
    (defvar latex-mode-electric-pairs '((?$ . ?$))
      "Electric pairs for LaTeX mode.")

    (defvar org-mode-electric-pairs '(())
      "Electric pairs for org mode.")

    (defun latex-mode-add-electric-pairs ()
      "Add electric pairs for LaTeX mode."
      (setq-local electric-pair-pairs (append electric-pair-pairs latex-mode-electric-pairs))
      (setq-local electric-pair-text-pairs electric-pair-pairs)
      (message "Electric pairs added for LaTeX mode: %s" electric-pair-pairs))

    (defun org-mode-add-electric-pairs ()
      "Add electric pairs for org mode."
      (setq-local electric-pair-pairs (append electric-pair-pairs
                                              org-mode-electric-pairs
                                              latex-mode-electric-pairs))
      (setq-local electric-pair-text-pairs electric-pair-pairs)
      (message "Electric pairs added for org mode: %s" electric-pair-pairs))

    :hook
    (latex-mode . latex-mode-add-electric-pairs)
    (org-mode . org-mode-add-electric-pairs))

  (use-package embark
    :bind
    ("C-." . embark-act)
    ("M-." . embark-dwim))

  (use-package em-banner)

  (use-package flycheck
    :hook
    (after-init . global-flycheck-mode))

  (use-package flycheck-inline
    :config
    (with-eval-after-load 'flycheck
      (add-hook 'flycheck-mode-hook #'flycheck-inline-mode)))

  (use-package format-all)

  (use-package magit)

  (use-package marginalia
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

  (use-package move-text
    :init
    (move-text-default-bindings))

  (use-package nix-mode
    :mode "\\.nix\\'")

  (use-package orderless
    :custom
    (completion-styles '(orderless flex))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package eat
    :bind
    (("C-c t e". eat)))

  (use-package vterm
    :bind
    (("C-c t v" . vterm)))

  (use-package org
    :bind
    (("C-M-<return>" . org-insert-subheading))
    :init
    (setq org-attach-id-dir "~/org/.attach"
          org-log-done 'time
          org-imenu-depth 7
          org-complete-tags-always-offer-all-agenda-tags t)
    (org-babel-do-load-languages 'org-babel-load-languages '((shell . t)
                                                             (emacs-lisp . t)
                                                             (python . t)
                                                             (R . t)
                                                             (dot . t)
                                                             (gnuplot . t))))


  (use-package org-roam
    :bind
    (("C-c r f" . org-roam-node-find)
     ("C-c r i" . org-roam-node-insert))
    :custom
    (org-roam-directory (concat org-directory "/roam"))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "''${title:*} " (propertize "''${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    (setq org-roam-completion-everywhere t)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

  (use-package org-modern
    :ensure t
    :defer t
    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda))

  (use-package org-superstar
    :hook
    (org-mode . (lambda () (org-superstar-mode 1))))

  (use-package org-present)

  (use-package salt-mode
    :hook
    (salt-mode . (lambda () (flyspell-mode 1))))

  (use-package moc)

  (use-package spacious-padding
    :init
    (setq spacious-padding-widths
          '( :internal-border-width 10
             :header-line-width 5
             :mode-line-width 5
             :tab-width 10
             :right-divider-width 30
             :scroll-bar-width 8
             :fringe-width 15))

    ;; Read the doc string of `spacious-padding-subtle-mode-line' as it
    ;; is very flexible and provides several examples.
    (setq spacious-padding-subtle-mode-line
          `( :mode-line-active 'default
             :mode-line-inactive vertical-border))

    (spacious-padding-mode 1))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package org-download)

  (use-package go-mode)

  (use-package treesit
    :init
    (setq major-mode-remap-alist
          '((bash-mode . bash-ts-mode)
            (python-mode . python-ts-mode)
            (go-mode . go-ts-mode)
            (rust-mode . rust-ts-mode))))

  (use-package vertico
    :custom
    (vertico-scroll-margin 0) ;; Different scroll margin
    (vertico-count 10) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  (use-package yasnippet
    :init
    (yas-global-mode 1))

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;;                               Functions                                          ;;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (defun tuxikus/get-jira-ticket-number (branch)
    (when (string-match "[A-Z]\\{8\\}-[0-9]*" branch)
      (message (match-string 0 branch))))

  (add-hook 'git-commit-setup-hook
            '(lambda ()
               (insert (concat (tuxikus/get-jira-ticket-number (magit-get-current-branch) ": ")))))

  (defun tuxikus/get-bookmarks-from-file ()
    "Get bookmarks from the bookmark file"
    (with-temp-buffer
      (insert-file-contents "~/.bookmarks.org")
      (org-mode)
      (let (bookmarks)
        (org-element-map (org-element-parse-buffer) 'link
          (lambda (l)
            (let* ((link (org-element-property :raw-link l))
                   (name (org-element-interpret-data (org-element-contents l)))
                   (tags (org-element-property :tags (org-element-property :parent l))))
              (push (concat name
                            "\n"
                            link
                            "\n"
                            (format "[%s]" (mapconcat #'identity tags ", "))) bookmarks)))) bookmarks)))

  (defun tuxikus/add-bookmark ()
    "Add a new bookmark to the bookmark file."
    (interactive)
    (let* ((title (read-from-minibuffer "Title: "))
           (url (read-from-minibuffer "URL: "))
           (tags (read-from-minibuffer "Tags: ")))
      (write-region (format "* [[%s][%s]] %s\n" url title tags) nil "~/.bookmarks.org" 'append)))

  (defun tuxikus/edit-bookmark ()
    "TODO implement."
    (interactive)
    (message "Not implemented."))

  (defun tuxikus/delete-bookmark ()
    "TODO implement."
    (interactive)
    (message "Not implemented."))

  (defun tuxikus/open-bookmark ()
    "Select a bookmark and open it in the default browser"
    (interactive)
    (browse-url
     (seq-elt (split-string
               (completing-read "Open: " (tuxikus/get-bookmarks-from-file))
               "\n") 1)))

  (defun tuxikus/change-org-directory ()
    "Change the active org directory."
    (interactive)
    (let ((selection (completing-read "Select: " '("~/org" "~/org-edu"))))
      (setq org-directory selection
            org-attach-id-dir (concat org-directory "/.attach")
            org-roam-directory (concat org-directory "/roam")
            org-roam-db-location (concat org-directory "/org-roam.db"))))

  (defun tuxikus/delete-current-file ()
    (interactive)
    (let ((file (buffer-file-name)))
      (when file
        (progn
          (delete-file file)
          (kill-buffer)
          (message "%s deleted" file)))))

  (defun tuxikus/org-set-sha256sum ()
    "Insert the sha256sum of the attachment at point."
    (interactive)
    (org-set-property
     "sha256"
     (concat
      "  "
      (string-trim (car (split-string
                         (shell-command-to-string
                          (format "sha256sum %s" (tuxikus/org-attach-id-get-path))) " "))))))

  (defun tuxikus/org-get-property (property)
    "Return the property PROPERTY of the org heading at point."
    (interactive "sProperty: ")
    (let ((property-value (org-entry-get (point) property)))
      (if property-value
          property-value
        nil)))

  (defun tuxikus/org-attach-id-get-path ()
    "Return the path of the attachment at point."
    (interactive)
    (let* ((attachment-dir (tuxikus/org-get-property "id"))
           (first-part (substring attachment-dir 0 2))
           (second-part (substring attachment-dir 2))
           (final-dir (concat org-attach-id-dir "/" first-part "/" second-part))
           (files (directory-files final-fir))
           (files (remove "." files))
           (files (remove ".." files))
           (file-path (concat
                       org-attach-id-dir
                       "/"
                       first-part
                       "/"
                       second-part
                       (car files))))
      (if (= (length files) 1)
          (if (called-interactively-p)
              (message "%s" files-path)
            (error "More than one attachment found!")))))

  (defcustom tuxikus/ssh-config-file "~/.ssh/config"
    "SSH config file path.")

  (defun tuxikus/parse-ssh-config ()
    "Return a list of hosts form the tuxikus/ssh-config-file"
    (let ((ssh-config-file (expand-file-name tuxikus/ssh-config-file))
          (hosts '()))
      (with-temp-buffer
        (insert-file-contents ssh-config-file)
        (goto-char (point-min))
        (while (re-search-forward "^Host .*" nil t)
          (let ((host (nth 1 (split-string (match-string 0) " "))))
            (push host hosts))))
      hosts))

  (defun tuxikus/tabspaces-ssh-workspace ()
    "Create a new tabspaces workspace and connect to the selected machine via ssh in vterm"
    (interactive)
    (let ((selected-host (completing-read "Host: " (tuxikus/parse-ssh-config))))
      (tabspaces-switch-or-create-workspace (concat "ssh:" selected-host))
      ;; (unless (get-buffer selecet-host)
      ;;   (vterm selected-host))
      (vterm (concat "ssh-" selected-host))
      (vterm--goto-line -1)
      (vterm-send-string (concat "ssh " selected-host))
      (vterm-send-return)))
#+end_src
***** Configuration dump
#+name: emacs-configuration-dumper
#+begin_src text :tangle ~/projects/personal/nix-config-dump/emacs/.emacs.d/init.el
  <<emacs-configuration-dump()>>
#+end_src

#+name: emacs-configuration-dump
#+begin_src python :noweb yes :results output :exports none
  config = """
  <<emacs-configuration>>
  """.replace("${config.fontSize}", "15") \
     .replace("''", "")

  print(config)
#+end_src
*** Scripts
**** uuidgenlc
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/scripts/uuidgenlc.nix :noweb yes :mkdirp yes
  {
    home.file.".local/bin/uuidgenlc" = {
      text = ''
        <<script-uuidgenlc>>
      '';

      executable = true;
    };
  }
#+end_src
***** Script
#+name: script-uuidgenlc
#+begin_src shell
  #!/usr/bin/env bash

  uuidgen | tr A-Z a-z
#+end_src
**** home-backup
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/scripts/home-backup.nix :noweb yes :mkdirp yes
  {
    home.file.".local/bin/home-backup" = {
      text = ''
        <<script-home-backup>>
      '';

      executable = true;
    };
  }

#+end_src
***** Script
#+name: script-home-backup
#+begin_src shell
  #!/usr/bin/env bash
  # Title          : home-backup
  # Date           : 2024-04-11
  # Author         : tuxikus
  # Version        : 1.1
  # Description    : Create backup of home directory
  # Options        :  -o destination/output path
  #                   -d enable --dry-run
  #                   -x enable --delete
  #                   --help print help
  #                   --version print version

  version="1.1"
  excludes="--exclude={'*/lost+found/','lost+found/'}"
  log_file_name=".backup-log.txt"
  enable_delete=
  enable_dry_run=
  options=
  rsync_command=
  destination_path=

  print_help() {
      cat <<END_OF_HELP
  ------------------------------------------------------
      [EXAMPLE] home-backup -o /path/to/backup/
      [EXAMPLE] home-backup -do /path/to/backup/
      [EXAMPLE] home-backup -dxo /path/to/backup/

      OPTIONS:
      -o          destination
      -d          enable dry-run
      -x          enable delete
      --help      print help
      --version   print version
  ------------------------------------------------------
  END_OF_HELP
  }

  print_version() {
      echo $version
  }

  check_path() {
      if [ ! -d $1 ]; then
        echo "Wrong usage!"
        print_help
        exit 0
      fi
  }

  write_log() {
      log_file_path="$HOME/''${log_file_name}"

      # check if log file exists
      if [ ! -f $log_file_path ]; then
        touch $log_file_path
      fi

      cat >> $log_file_path <<END_OF_LOG
  $(date '+%F_%H:%M')_$1
  END_OF_LOG
  }

  if [ "$#" -eq 0 ]; then
      echo "Illegal number of parameters"
      print_help
      exit 1
  fi

  case "$1" in
      --help)
        print_help
        exit 0
        ;;
      --version)
        print_version
        exit 0
        ;;
  esac

  while getopts 'o:dx' option; do
      case "$option" in
        o) destination_path="$OPTARG";;
        d) enable_dry_run=1;;
        x) enable_delete=1;;
        ?)
            print_help
            exit 1
            ;;
      esac
  done

  check_path $destination_path

  if [[ $enable_dry_run -eq 1 && $enable_delete -eq 1 ]]; then
      options="--dry-run --delete"
  elif [[ $enable_dry_run -eq 1 ]]; then
      options="--dry-run"
  elif [[ $enable_delete -eq 1 ]]; then
      options="--delete"
  else
      options=""
  fi

  rsync_command="rsync -av $options $excludes \
                     $HOME/.bookmarks.org \
                     $HOME/.bash_history \
                     $HOME/.backup-log.txt \
                     $HOME/.ppw \
                     $HOME/.gnupg \
                     $HOME/.password-store \
                     $HOME/org \
                     $HOME/org-edu \
                     $HOME/multimedia \
                     $HOME/projects \
                     $destination_path"

  eval $rsync_command

  if [ -z $enable_dry_run ]; then
      write_log $destination_path
  fi

  sync

  echo "Done!"
#+end_src
**** music-unzip
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/scripts/music-unzip.nix :noweb yes :mkdirp yes
  {
    home.file.".local/bin/music-unzip" = {
      text = ''
        <<script-music-unzip()>>
      '';

      executable = true;
      };
  }
#+end_src
***** Script
#+name: script-music-unzip
#+begin_src emacs-lisp :noweb yes
  (with-temp-buffer
    (insert-file-contents "~/projects/personal/python-music-unzip/main.py")
    (buffer-string))
#+end_src
**** cli-project-switcher
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/scripts/cli-project-switcher.nix :mkdirp yes
  { lib, config, ...}:
  {
    options = {
      projectDirectories = lib.mkOption {
        type = lib.types.str;
      };
    };

    config = {
      home.file.".local/bin/cli-project-switcher" = {
        text = ''
          <<script-cli-project-switcher()>>
        '';
        executable = true;
      };

      home.file.".config/cli-project-switcher/config".text = ''
        ${config.projectDirectories}
      '';
    };
  }
#+end_src
***** Script
#+name: script-cli-project-switcher
#+begin_src emacs-lisp :noweb yes
  (with-temp-buffer
    (insert-file-contents "~/projects/personal/cli-project-switcher/main.py")
    (buffer-string))
#+end_src
*** Education
**** Latex
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/education/latex.nix :mkdirp yes
  { pkgs, ... }:
  let
    tex = (pkgs.texlive.combine {
      inherit (pkgs.texlive) scheme-basic
        dvisvgm
        dvipng
        ulem
        amsmath;
    });
  in
  {
    home.packages = with pkgs; [
      tex
    ];
  }
#+end_src
**** R
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/education/r.nix :mkdirp yes
  { pkgs, ... }:
  {
    home.packages = with pkgs; [
      R
    ];
  }
#+end_src
*** Shells
**** Bash
#+begin_src nix :tangle modules/home-manager/shell/bash.nix :mkdirp yes
  { pkgs, ... }:
  {
    programs.bash = {
      enable = true;
      enableCompletion = true;
      initExtra = "PS1='[$?] \\w \\n\\$ '";
      bashrcExtra = ''
        PATH=~/.local/bin:$PATH

        if command -v fzf-share >/dev/null; then
          source "$(fzf-share)/key-bindings.bash"
          source "$(fzf-share)/completion.bash"
        fi
      '';
      shellAliases = {
        ed = "emacs --daemon";
        #e = "emacsclient -c & disown";
        e = ''emacsclient -c --eval "(tabspaces-restore-session)" & disown'';
        night-shift-on = "hyprsunset --temperature 3000 & disown";
        night-shift-off = "pgrep hyprsunset | xargs kill";
        ll = "ls -lah";
        ff = "fastfetch";
        cdp = "cd $(cli-project-switcher | fzf)";
        vanilla-emacs = "emacs -q --load ~/projects/personal/vanilla-emacs/init.el";
      };
    };
  }
#+end_src
**** xonsh
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/shell/xonsh.nix :noweb yes :mkdirp yes
  { pkgs, ... }:
  {
    home.packages = with pkgs; [
      xonsh
    ];

    home.file.".config/xonsh/rc.xsh" = {
      text = ''
      <<xonsh-config>>
      '';
    };
  }
#+end_src
***** Configuration
#+name: xonsh-config
#+begin_src python
  $PROMPT = '{RED}{last_return_code_if_nonzero:[{BOLD_INTENSE_RED}{}{RED}] }{RESET} {YELLOW}{env_name}{RESET}{GREEN} {cwd}{branch_color}{curr_branch: {}}{RESET} {BOLD_BLUE}{prompt_end}{RESET} '

  $PATH.append("~/.local/bin/")

  aliases['ll'] = 'ls -lah'
  aliases['ff'] = 'fastfetch'
  aliases['pyvc'] = 'python3 -m venv venv'
  aliases['pyva'] = 'source-bash venv/bin/activate'
  aliases['pip-freeze'] = 'python3 -m pip freeze > requirements.txt'
#+end_src

*** Utility
**** tmux
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/utility/tmux.nix :mkdirp yes
  {
    programs.tmux = {
      enable = true;
      shortcut = "z";
      newSession = true;
      escapeTime = 0;
      terminal = "xterm-256color";

      extraConfig = ''
      <<tmux-configuration>>
      '';
    };
  }
#+end_src
***** Configuration
#+name: tmux-configuration
#+begin_src conf :tangle ~/projects/personal/nix-config-dump/tmux/.config/tmux/tmux.conf
  # vim like pane resizing
  bind -r C-k resize-pane -U
  bind -r C-j resize-pane -D
  bind -r C-h resize-pane -L
  bind -r C-l resize-pane -R

  # vim like pane switching
  bind -r k select-pane -U
  bind -r j select-pane -D
  bind -r h select-pane -L
  bind -r l select-pane -R

  unbind Up
  unbind Down
  unbind Left
  unbind Right

  unbind C-Up
  unbind C-Down
  unbind C-Left
  unbind C-Right

  # easy-to-remember split pane commands
  bind | split-window -h -c "#{pane_current_path}"
  bind - split-window -v -c "#{pane_current_path}"
  bind c new-window -c "#{pane_current_path}"
#+end_src
**** zellij
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/utility/zellij.nix :mkdirp yes
  {
    programs.zellij = {
      enable = true;
      #enableBashIntegration = true;
    };

    home.file.".config/zellij/config.kdl".text = ''
      <<zellij-configuration>>
    '';

  }
#+End_src
***** Configuration
#+name: zellij-configuration
#+begin_src conf :tangle ~/projects/personal/nix-config-dump/zellij/.config/zellij/config.kdl
  default_mode "locked"
  theme "catppuccin-latte"
  default_shell "bash"
#+end_src
*** Window manager
**** Hyprland
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/window-manager/hyprland.nix
  { config, pkgs, lib, ... }:
  let
    hyprConfigDirectory = ".config/hypr";
  in
  {
    options = {
      terminal = lib.mkOption {
            type = lib.types.str;
      };
      appLauncher = lib.mkOption {
            type = lib.types.str;
      };
    };

    config = {
      home.file."${hyprConfigDirectory}/hyprland.conf" = {
            text = ''
          <<hyprland-configuration>>
            '';
      };
    };
  }
#+end_src
***** Configuration
#+name: hyprland-configuration
#+begin_src conf
  exec-once = waybar
  exec-once = hyprpaper
  exec-once = dunst
  exec-once = emacsclient -c
  exec-once = firefox

  $terminal = ${config.terminal}
  $app_launcher = ${config.appLauncher}

  env = XCURSOR_SIZE,24
  env = QT_QPA_PLATFORMTHEME,qt5ct

  monitor = DP-3, 2560x1440@144, 0x0, 1

  input {
      kb_layout = us
      kb_variant =
      kb_model =
      kb_options =
      kb_rules =

      follow_mouse = 1

      touchpad {
          natural_scroll = no
      }

      sensitivity = 0
      accel_profile = flat
  }

  general {
      gaps_in = 10
      gaps_out = 10
      border_size = 3
      col.active_border = rgba(aa0000ff)
      col.inactive_border = rgba(aaaaaaff)

      layout = dwindle

      allow_tearing = false
  }

  decoration {
      rounding = 10

      blur {
          enabled = true
          size = 3
          passes = 1
      }
  }

  animations {
      enabled = yes
      bezier = myBezier, 0.05, 0.9, 0.1, 1.05
      animation = windows, 1, 7, myBezier
      animation = windowsOut, 1, 7, default, popin 80%
      animation = border, 1, 10, default
      animation = borderangle, 1, 8, default
      animation = fade, 1, 7, default
      animation = workspaces, 1, 6, default
  }

  dwindle {
      pseudotile = yes
      preserve_split = yes
  }

  misc {
      force_default_wallpaper = -1
  }

  $mainMod = SUPER

  bind = $mainMod, q, killactive,

  bind = $mainMod, return, exec, $terminal
  bind = $mainMod SHIFT, e, exit
  bind = $mainMod, m, fullscreen
  bind = $mainMod, e, exec, emacsclient -c
  bind = $mainMod, d, exec, $app_launcher

  bind = $mainMod, left, movefocus, l
  bind = $mainMod, right, movefocus, r
  bind = $mainMod, up, movefocus, u
  bind = $mainMod, down, movefocus, d

  bind = $mainMod SHIFT, left, movewindow, l
  bind = $mainMod SHIFT, right, movewindow, r
  bind = $mainMod SHIFT, up, movewindow, u
  bind = $mainMod SHIFT, down, movewindow, d

  bind = $mainMod, 1, workspace, 1
  bind = $mainMod, 2, workspace, 2
  bind = $mainMod, 3, workspace, 3
  bind = $mainMod, 4, workspace, 4
  bind = $mainMod, 5, workspace, 5
  bind = $mainMod, 6, workspace, 6
  bind = $mainMod, 7, workspace, 7
  bind = $mainMod, 8, workspace, 8
  bind = $mainMod, 9, workspace, 9
  bind = $mainMod, 0, workspace, 10

  bind = $mainMod SHIFT, 1, movetoworkspace, 1
  bind = $mainMod SHIFT, 2, movetoworkspace, 2
  bind = $mainMod SHIFT, 3, movetoworkspace, 3
  bind = $mainMod SHIFT, 4, movetoworkspace, 4
  bind = $mainMod SHIFT, 5, movetoworkspace, 5
  bind = $mainMod SHIFT, 6, movetoworkspace, 6
  bind = $mainMod SHIFT, 7, movetoworkspace, 7
  bind = $mainMod SHIFT, 8, movetoworkspace, 8
  bind = $mainMod SHIFT, 9, movetoworkspace, 9
  bind = $mainMod SHIFT, 0, movetoworkspace, 10

  # Move/resize windows with mainMod + LMB/RMB and dragging
  bindm = $mainMod, mouse:272, movewindow
  bindm = $mainMod, mouse:273, resizewindow
#+end_src
***** Configuration dump
#+name: hyprland-configuration-dumper
#+begin_src text :noweb yes :tangle ~/projects/personal/nix-config-dump/hypr/.config/hypr/hyprland.conf
  <<hyprland-configuration-dump()>>
#+end_src

#+name: hyprland-configuration-dump
#+begin_src python :noweb yes :results output :exports none
  config = """
  <<hyprland-configuration>>
  """.replace("${config.terminal}", "ghostty") \
     .replace("${config.appLauncher}", "fuzzel")

  print(config)
#+end_src
**** Hyprpaper
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/window-manager/hyprpaper.nix
  {
    config,
    pkgs,
    lib,
    ...
  }:
  let
    hyprConfigDirectory = ".config/hypr";
  in
  {
    options = {
      wallpaper = lib.mkOption {
        type = lib.types.path;
      };
    };

    config = {
      home.file."${hyprConfigDirectory}/hyprpaper.conf".text = ''
        <<hyprpaper-configuration>>
      '';
    };
  }
#+end_src
***** Configuration
#+name: hyprpaper-configuration
#+begin_src conf :noweb tangle
  preload = ${config.wallpaper}
  wallpaper = DP-3, ${config.wallpaper}
#+end_src
***** Configuration dump
#+name: hyprpaper-configuration-dumper
#+begin_src text :noweb yes :tangle ~/projects/personal/nix-config-dump/hypr/.config/hypr/hyprpaper.config
  <<hyprpaper-configuration-dump()>>
#+end_src

#+name: hyprpaper-configuration-dump
#+begin_src python :noweb yes :results output :exports none
  config = """
  <<hyprpaper-configuration>>
  """.replace("${config.wallpaper}", "~/.local/wallpaper/current.png")

  print(config)
#+end_src
**** Waybar
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/window-manager/waybar.nix
  let
    waybarConfigDirectory = ".config/waybar";
  in
  {
    home.file."${waybarConfigDirectory}/config".text = ''
      <<waybar-configuration>>
    '';

    home.file."${waybarConfigDirectory}/style.css".text = ''
      <<waybar-style>>
    '';
  }
#+end_src
***** Configuration
#+name: waybar-configuration
#+begin_src json
  {
      "layer": "top", // Waybar at top layer
      "position": "top", // Waybar position (top|bottom|left|right)
      "modules-left": ["hyprland/workspaces"],
      "modules-center": ["custom/music"],
      "modules-right": ["pulseaudio", "clock", "tray"],
      "clock": {
        "timezone": "Europe/Berlin",
        "tooltip-format": "<big>{:%Y %B}</big>\n<tt><small>{calendar}</small></tt>",
        "format-alt": "  {:%d/%m/%Y} ",
        "format": "  {:%H:%M} "
      },
      "pulseaudio": {
        // "scroll-step": 1, // %, can be a float
        "format": "{icon} {volume}%",
        "format-muted": "  ",
        "format-icons": {
            "default": ["", "", ""]
        },
      },
  }
#+end_src

#+name: waybar-style
#+begin_src css
  ,* {
      font-size: 20px;
      font-family: "Iosevka Nerd Font";
  }

  window#waybar {
      background: rgba(0,0,0,1.0);
  }

  #window {
      color: #c5c8c6;
  }

  #workspaces button {
      background-color: black;
      color: white;
  }

  #workspaces button:hover {
      background-color: white;
      color: black;
  }

  #workspaces button.focused {
      background-color: white;
      color: black;
  }

  #custom-notification {
      font-family: "Fira Code";
  }

  #clock,
  #pulseaudio,
  #workspaces {
      background: black;
      color: white;
  }
#+end_src
**** Qtile
***** Nix configuration
#+begin_src nix :tangle modules/home-manager/window-manager/qtile.nix :noweb yes
  { config, lib, ... }:
  {
    options = {
      qtileWallpaper = lib.mkOption {
        type = lib.types.path;
      };
    };
    config = {
      home.file = {
        ".config/qtile/config.py".text = ''
          <<qtile-configuration>>
        '';

        ".config/qtile/autostart.sh" = {
          text = ''
            #!/usr/bin/env sh
            wlr-randr --output DP-3 --mode 2560x1440@144 &
            dunst &
          '';
          executable = true;
        };
      };
    };
  }
#+end_src
***** Configuration
#+name: qtile-configuration
#+begin_src python
  import os
  import subprocess

  from libqtile import bar, layout, qtile, widget, hook
  from libqtile.config import Click, Drag, Group, Key, Match, Screen
  from libqtile.lazy import lazy
  from libqtile.backend.wayland import InputConfig

  @hook.subscribe.startup_once
  def autostart():
      home = os.path.expanduser('~/.config/qtile/autostart.sh')
      subprocess.call(home)

  mod = "mod4"
  terminal = "ghostty"
  app_launcher = "fuzzel"

  keys = [
      Key([mod], "Left", lazy.layout.left(), desc="Move focus to left"),
      Key([mod], "Right", lazy.layout.right(), desc="Move focus to right"),
      Key([mod], "Down", lazy.layout.down(), desc="Move focus down"),
      Key([mod], "Up", lazy.layout.up(), desc="Move focus up"),

      Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc="Move window to the left"),
      Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc="Move window to the right"),
      Key([mod, "shift"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
      Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),

      # Toggle between split and unsplit sides of stack.
      # Split = all windows displayed
      # Unsplit = 1 window displayed, like Max layout, but still with
      # multiple stack panes
      Key(
          [mod, "shift"],
          "Return",
          lazy.layout.toggle_split(),
          desc="Toggle between split and unsplit sides of stack",
      ),
      Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),
      # Toggle between different layouts as defined below
      Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),
      Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
      Key(
          [mod],
          "m",
          lazy.window.toggle_fullscreen(),
          desc="Toggle fullscreen on the focused window",
      ),

      Key([mod], "d", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
      #Key([mod], "d", lazy.spawn(app_launcher), desc="Spawn fuzzel"),
  ]

  # Add key bindings to switch VTs in Wayland.
  # We can't check qtile.core.name in default config as it is loaded before qtile is started
  # We therefore defer the check until the key binding is run by using .when(func=...)
  for vt in range(1, 8):
      keys.append(
          Key(
              ["control", "mod1"],
              f"f{vt}",
              lazy.core.change_vt(vt).when(func=lambda: qtile.core.name == "wayland"),
              desc=f"Switch to VT{vt}",
          )
      )


  groups = [Group(i) for i in "123456789"]

  for i in groups:
      keys.extend(
          [
              # mod + group number = switch to group
              Key(
                  [mod],
                  i.name,
                  lazy.group[i.name].toscreen(),
                  desc=f"Switch to group {i.name}",
              ),
              # mod + shift + group number = switch to & move focused window to group
              Key(
                  [mod, "shift"],
                  i.name,
                  lazy.window.togroup(i.name, switch_group=True),
                  desc=f"Switch to & move focused window to group {i.name}",
              ),
              # Or, use below if you prefer not to switch to that group.
              # # mod + shift + group number = move focused window to group
              # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
              #     desc="move focused window to group {}".format(i.name)),
          ]
      )

  layouts = [
      layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=4, margin=5),
      layout.Max(),
      # Try more layouts by unleashing below layouts.
      # layout.Stack(num_stacks=2),
      # layout.Bsp(),
      # layout.Matrix(),
      # layout.MonadTall(),
      # layout.MonadWide(),
      # layout.RatioTile(),
      # layout.Tile(),
      # layout.TreeTab(),
      # layout.VerticalTile(),
      # layout.Zoomy(),
  ]

  widget_defaults = dict(
      font="Iosevka Nerd Font",
      fontsize=15,
      padding=10,
  )
  extension_defaults = widget_defaults.copy()

  screens = [
      Screen(
          wallpaper="${config.qtileWallpaper}",
          wallpaper_mode="fill",
          top=bar.Bar(
              [
                  widget.CurrentLayout(),
                  widget.GroupBox(),
                  widget.Prompt(),
                  widget.WindowName(),
                  widget.Chord(
                      chords_colors={
                          "launch": ("#ff0000", "#ffffff"),
                      },
                      name_transform=lambda name: name.upper(),
                  ),
                  # NB Systray is incompatible with Wayland, consider using StatusNotifier instead
                  widget.StatusNotifier(),
                  # widget.Systray(),
                  widget.CPU(),
                  widget.Memory(),
                  widget.PulseVolume(),
                  widget.Clock(format="%Y-%m-%d %a %I:%M %p"),
                  widget.QuickExit(),
              ],
              32,
              # border_width=[0, 0, 2, 0],  # Draw top and bottom borders
              # border_color=["000000", "000000", "000000", "000000"]  # Borders are magenta
          ),
          # You can uncomment this variable if you see that on X11 floating resize/moving is laggy
          # By default we handle these events delayed to already improve performance, however your system might still be struggling
          # This variable is set to None (no cap) by default, but you can set it to 60 to indicate that you limit it to 60 events per second
          # x11_drag_polling_rate = 60,
      ),
  ]

  # Drag floating layouts.
  mouse = [
      Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
      Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
      Click([mod], "Button2", lazy.window.bring_to_front()),
  ]

  dgroups_key_binder = None
  dgroups_app_rules = []  # type: list
  follow_mouse_focus = True
  bring_front_click = False
  floats_kept_above = True
  cursor_warp = False
  floating_layout = layout.Floating(
      float_rules=[
          # Run the utility of `xprop` to see the wm class and name of an X client.
          ,*layout.Floating.default_float_rules,
          Match(wm_class="confirmreset"),  # gitk
          Match(wm_class="makebranch"),  # gitk
          Match(wm_class="maketag"),  # gitk
          Match(wm_class="ssh-askpass"),  # ssh-askpass
          Match(title="branchdialog"),  # gitk
          Match(title="pinentry"),  # GPG key password entry
      ]
  )
  auto_fullscreen = True
  focus_on_window_activation = "smart"
  reconfigure_screens = True

  # If things like steam games want to auto-minimize themselves when losing
  # focus, should we respect this or not?
  auto_minimize = True

  # get by running: qtile cmd-obj -o core -f get_inputs
  wl_input_rules = {
     "1133:16519:Logitech G903 LS": InputConfig(accel_profile='flat'),
  }

  # xcursor theme (string or None) and size (integer) for Wayland backend
  wl_xcursor_theme = None
  wl_xcursor_size = 24

  # XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
  # string besides java UI toolkits; you can see several discussions on the
  # mailing lists, GitHub issues, and other WM documentation that suggest setting
  # this string if your java app doesn't work correctly. We may as well just lie
  # and say that we're a working one by default.
  #
  # We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
  # java that happens to be on java's whitelist.
  wmname = "LG3D"
#+end_src
